
import React, { useState, useMemo, useEffect, useRef } from 'react';
import { useAppContext } from '../contexts/AppContext';
import { DiaryEntry, Mood } from '../types';
import { Plus, Search, Tag, Calendar, Smile, X, Save, Trash2, Edit, Sparkles, Loader, Image as ImageIcon, Trash } from 'lucide-react';
import { format, parseISO } from 'date-fns';
import { MOOD_COLORS, MOOD_BACKGROUNDS, MOOD_EMOJIS } from '../constants';

const AIAnalysisModal: React.FC<{ entry: DiaryEntry, onClose: () => void }> = ({ entry, onClose }) => {
    const { isAnalyzing, analysisResult, analysisError, analyzeEntry } = useAppContext();

    useEffect(() => {
        analyzeEntry(entry);
    }, [entry]);

    return (
        <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
            <div className="relative w-full max-w-2xl bg-background border border-border rounded-xl shadow-2xl flex flex-col">
                <div className="p-4 border-b border-border flex justify-between items-center">
                    <div className="flex items-center space-x-2">
                        <Sparkles className="text-purple-400" />
                        <h2 className="text-xl font-bold">AI Reflection</h2>
                    </div>
                    <button onClick={onClose} className="p-2 rounded-full hover:bg-secondary/50 transition-colors">
                        <X size={20} />
                    </button>
                </div>
                <div className="p-6 prose prose-invert prose-p:text-foreground/80 prose-headings:text-foreground max-w-none">
                    {isAnalyzing && (
                        <div className="flex flex-col items-center justify-center space-y-4 h-48">
                            <Loader className="animate-spin text-purple-400" size={40} />
                            <p className="text-muted-foreground">Analyzing your entry...</p>
                        </div>
                    )}
                    {analysisError && <p className="text-red-400">{analysisError}</p>}
                    {analysisResult && (
                        <div dangerouslySetInnerHTML={{ __html: analysisResult.replace(/\n/g, '<br />') }} />
                    )}
                </div>
                 <div className="p-4 border-t border-border text-xs text-muted-foreground text-center">
                    AI insights are generated by a large language model and may not always be accurate.
                </div>
            </div>
        </div>
    );
};


const EntryEditor: React.FC<{ entry: DiaryEntry | null, onSave: (entry: DiaryEntry) => void, onCancel: () => void, onDelete?: (id: string) => void }> = ({ entry, onSave, onCancel, onDelete }) => {
    const { isSuggestingTags, suggestTags } = useAppContext();
    const [tagInput, setTagInput] = useState('');
    const imageInputRef = useRef<HTMLInputElement>(null);
    const [currentEntry, setCurrentEntry] = useState<DiaryEntry>(entry || {
        id: Date.now().toString(),
        date: new Date().toISOString(),
        title: '',
        content: '',
        mood: Mood.Neutral,
        tags: [],
        gratitude: [''],
        goals: [''],
        emoji: '✍️',
        image: null
    });

    const isSaveDisabled = !currentEntry.title.trim() || !currentEntry.content.trim();

    useEffect(() => {
        if(entry) setCurrentEntry(entry);
    }, [entry]);

    const handleSave = () => {
        if (!isSaveDisabled) {
            onSave(currentEntry);
        }
    };
    
    const handleFieldChange = <K extends keyof DiaryEntry,>(field: K, value: DiaryEntry[K]) => {
        setCurrentEntry(prev => ({...prev, [field]: value}));
    };
    
    const handleListChange = (field: 'gratitude' | 'goals', index: number, value: string) => {
        const newList = [...currentEntry[field]];
        newList[index] = value;
        handleFieldChange(field, newList as any);
    };

    const addListItem = (field: 'gratitude' | 'goals') => {
        handleFieldChange(field, [...currentEntry[field], ''] as any);
    };
    
    const removeListItem = (field: 'gratitude' | 'goals', index: number) => {
        handleFieldChange(field, currentEntry[field].filter((_, i) => i !== index) as any);
    };

    const handleAddTag = () => {
        const trimmedTag = tagInput.trim();
        if (trimmedTag && !currentEntry.tags.includes(trimmedTag)) {
            handleFieldChange('tags', [...currentEntry.tags, trimmedTag]);
        }
        setTagInput('');
    };

    const handleRemoveTag = (tagToRemove: string) => {
        handleFieldChange('tags', currentEntry.tags.filter(tag => tag !== tagToRemove));
    };

    const handleSuggestTags = async () => {
        const suggested = await suggestTags(currentEntry);
        if (suggested.length > 0) {
            const newTags = [...currentEntry.tags];
            suggested.forEach(tag => {
                if (!newTags.find(t => t.toLowerCase() === tag.toLowerCase())) {
                    newTags.push(tag);
                }
            });
            handleFieldChange('tags', newTags);
        }
    };
    
    const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (loadEvent) => {
                handleFieldChange('image', loadEvent.target?.result as string);
            };
            reader.readAsDataURL(file);
        }
    };


    return (
        <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
            <div className={`relative w-full max-w-4xl h-[90vh] bg-background border border-border rounded-xl shadow-2xl flex flex-col bg-gradient-to-br ${MOOD_BACKGROUNDS[currentEntry.mood]}`}>
                <div className="p-4 border-b border-border flex justify-between items-center">
                    <h2 className="text-xl font-bold">{entry ? 'Edit Entry' : 'New Entry'}</h2>
                    <div className="flex items-center space-x-2">
                        {entry && onDelete && (
                             <button onClick={() => onDelete(entry.id)} className="p-2 rounded-full hover:bg-destructive/20 text-red-400 transition-colors">
                                <Trash2 size={20} />
                            </button>
                        )}
                        <button onClick={onCancel} className="p-2 rounded-full hover:bg-secondary/50 transition-colors">
                            <X size={20} />
                        </button>
                    </div>
                </div>
                <div className="flex-grow overflow-y-auto p-6 space-y-6">
                    <input 
                        type="text" 
                        placeholder="Entry Title..." 
                        value={currentEntry.title}
                        onChange={(e) => handleFieldChange('title', e.target.value)}
                        className="w-full bg-transparent text-4xl font-bold focus:outline-none"
                    />
                    <div className="flex items-center space-x-4">
                        <input 
                            type="date"
                            value={format(parseISO(currentEntry.date), 'yyyy-MM-dd')}
                            onChange={e => handleFieldChange('date', new Date(e.target.value).toISOString())}
                            className="bg-secondary/50 p-2 rounded-md border border-border"
                        />
                        <div className="flex items-center space-x-1 p-1 bg-secondary/50 border border-border rounded-full">
                            {Object.values(Mood).map(mood => (
                                <button key={mood} onClick={() => handleFieldChange('mood', mood)} className={`p-2 rounded-full text-xl transition-transform duration-200 ${currentEntry.mood === mood ? 'bg-primary/20 scale-110' : 'hover:bg-primary/10'}`}>
                                    {MOOD_EMOJIS[mood]}
                                </button>
                            ))}
                        </div>
                    </div>
                     <textarea 
                        placeholder="Write your heart out..." 
                        value={currentEntry.content}
                        onChange={e => handleFieldChange('content', e.target.value)}
                        className="w-full h-48 bg-transparent text-lg focus:outline-none resize-none"
                    />
                    
                    <div>
                        <input type="file" accept="image/*" ref={imageInputRef} onChange={handleImageUpload} className="hidden" />
                        {!currentEntry.image ? (
                            <button onClick={() => imageInputRef.current?.click()} className="flex items-center space-x-2 text-muted-foreground hover:text-primary transition-colors text-sm">
                                <ImageIcon size={16} />
                                <span>Add Image</span>
                            </button>
                        ) : (
                            <div className="relative w-48 h-32">
                                <img src={currentEntry.image} alt="Entry attachment" className="w-full h-full object-cover rounded-md" />
                                <button onClick={() => handleFieldChange('image', null)} className="absolute top-1 right-1 p-1.5 bg-black/60 rounded-full text-white hover:bg-black/80 transition-colors">
                                    <Trash size={16} />
                                </button>
                            </div>
                        )}
                    </div>

                    <div>
                        <h3 className="font-semibold mb-2">Tags</h3>
                        <div className="flex flex-wrap gap-2 mb-2">
                            {currentEntry.tags.map((tag) => (
                                <div key={tag} className="flex items-center bg-primary/20 text-primary px-2 py-1 rounded-full text-sm">
                                    <span>{tag}</span>
                                    <button onClick={() => handleRemoveTag(tag)} className="ml-1.5 text-primary/70 hover:text-primary">
                                        <X size={14} />
                                    </button>
                                </div>
                            ))}
                        </div>
                        <div className="flex items-center gap-2">
                            <input 
                                type="text" 
                                value={tagInput}
                                onChange={e => setTagInput(e.target.value)}
                                onKeyDown={e => { if (e.key === 'Enter' || e.key === ',') { e.preventDefault(); handleAddTag(); } }}
                                placeholder="Add a tag..."
                                className="flex-grow bg-secondary/50 p-2 border border-border rounded-md focus:outline-none focus:ring-1 focus:ring-primary/50"
                            />
                            <button
                                type="button"
                                onClick={handleSuggestTags}
                                disabled={isSuggestingTags}
                                title="Suggest Tags with AI"
                                className="p-2.5 bg-purple-500/20 text-purple-300 rounded-md flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed hover:bg-purple-500/30 transition-colors"
                            >
                                {isSuggestingTags ? <Loader size={18} className="animate-spin" /> : <Sparkles size={18} />}
                            </button>
                        </div>
                    </div>
                    <div>
                        <h3 className="font-semibold mb-2">Gratitude</h3>
                        {currentEntry.gratitude.map((item, index) => (
                             <div key={index} className="flex items-center mb-2">
                                <input type="text" value={item} onChange={e => handleListChange('gratitude', index, e.target.value)} placeholder="Something you're grateful for..." className="flex-grow bg-secondary/50 p-2 border border-border rounded-l-md focus:outline-none focus:ring-1 focus:ring-primary/50" />
                                {currentEntry.gratitude.length > 1 && <button onClick={() => removeListItem('gratitude', index)} className="p-2 bg-red-500/20 text-red-300 rounded-r-md border border-red-500/30 border-l-0">-</button>}
                            </div>
                        ))}
                        <button onClick={() => addListItem('gratitude')} className="text-sm text-primary/80 hover:text-primary">+ Add more</button>
                    </div>
                    <div>
                        <h3 className="font-semibold mb-2">Goals for tomorrow</h3>
                        {currentEntry.goals.map((item, index) => (
                             <div key={index} className="flex items-center mb-2">
                                <input type="text" value={item} onChange={e => handleListChange('goals', index, e.target.value)} placeholder="A goal for the next day..." className="flex-grow bg-secondary/50 p-2 border border-border rounded-l-md focus:outline-none focus:ring-1 focus:ring-primary/50" />
                                {currentEntry.goals.length > 1 && <button onClick={() => removeListItem('goals', index)} className="p-2 bg-red-500/20 text-red-300 rounded-r-md border border-red-500/30 border-l-0">-</button>}
                            </div>
                        ))}
                        <button onClick={() => addListItem('goals')} className="text-sm text-primary/80 hover:text-primary">+ Add more</button>
                    </div>
                </div>
                <div className="p-4 border-t border-border">
                    <button 
                        onClick={handleSave} 
                        disabled={isSaveDisabled}
                        className="w-full flex items-center justify-center space-x-2 p-3 bg-gradient-to-r from-purple-500 to-pink-500 text-white font-semibold rounded-md hover:opacity-90 disabled:opacity-50 disabled:cursor-not-allowed transition-opacity">
                        <Save size={20} />
                        <span>Save Entry</span>
                    </button>
                     {isSaveDisabled && (
                        <p className="text-xs text-center text-muted-foreground mt-2">
                            A title and content are required to save the entry.
                        </p>
                    )}
                </div>
            </div>
        </div>
    );
};

const DiaryEntryCard: React.FC<{ entry: DiaryEntry, onEdit: (entry: DiaryEntry) => void, onAnalyze: (entry: DiaryEntry) => void }> = ({ entry, onEdit, onAnalyze }) => {
    return (
        <div className={`flex flex-col p-6 rounded-xl border-t-4 bg-secondary/30 backdrop-blur-sm transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${MOOD_COLORS[entry.mood].replace('bg-', 'border-')}`}>
            {entry.image && (
                <div className="mb-4 -mx-6 -mt-6">
                    <img src={entry.image} alt="Diary entry attachment" className="w-full h-40 object-cover rounded-t-xl" />
                </div>
            )}
            <div className="flex justify-between items-start">
                <div>
                    <h3 className="text-xl font-bold">{entry.title}</h3>
                    <p className="text-sm text-muted-foreground">{format(parseISO(entry.date), 'EEEE, MMMM d, yyyy')}</p>
                </div>
                <div className={`text-2xl px-3 py-1 rounded-full ${MOOD_COLORS[entry.mood]}`}>
                    {MOOD_EMOJIS[entry.mood]}
                </div>
            </div>
            <p className="mt-4 text-foreground/80 line-clamp-3 flex-grow">{entry.content}</p>
            <div className="mt-4 flex justify-between items-center">
                <div className="flex space-x-2 flex-wrap gap-y-1">
                    {entry.tags.slice(0, 3).map(tag => <span key={tag} className="text-xs bg-primary/10 text-primary/80 px-2 py-1 rounded-full">{tag}</span>)}
                </div>
                <div className="flex items-center space-x-1">
                    <button onClick={() => onAnalyze(entry)} className="p-2 rounded-full hover:bg-purple-500/20 text-purple-400">
                        <Sparkles size={16} />
                    </button>
                    <button onClick={() => onEdit(entry)} className="p-2 rounded-full hover:bg-primary/10 text-primary/80">
                        <Edit size={16} />
                    </button>
                </div>
            </div>
        </div>
    );
}

const Diary: React.FC = () => {
    const { entries, addEntry, updateEntry, deleteEntry, clearAnalysis } = useAppContext();
    const [isEditing, setIsEditing] = useState(false);
    const [entryToEdit, setEntryToEdit] = useState<DiaryEntry | null>(null);
    const [entryToAnalyze, setEntryToAnalyze] = useState<DiaryEntry | null>(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [selectedMood, setSelectedMood] = useState<Mood | null>(null);

    const filteredEntries = useMemo(() => {
        return entries
            .filter(entry => {
                if (selectedMood && entry.mood !== selectedMood) return false;
                if (searchTerm) {
                    const lowerSearch = searchTerm.toLowerCase();
                    return (
                        entry.title.toLowerCase().includes(lowerSearch) ||
                        entry.content.toLowerCase().includes(lowerSearch) ||
                        entry.tags.some(tag => tag.toLowerCase().includes(lowerSearch))
                    );
                }
                return true;
            })
            .sort((a, b) => parseISO(b.date).getTime() - parseISO(a.date).getTime());
    }, [entries, searchTerm, selectedMood]);
    
    const handleSaveEntry = async (entry: DiaryEntry) => {
        if (entries.some(e => e.id === entry.id)) {
            await updateEntry(entry);
        } else {
            await addEntry(entry);
        }
        setIsEditing(false);
        setEntryToEdit(null);
    };

    const handleEdit = (entry: DiaryEntry) => {
        setEntryToEdit(entry);
        setIsEditing(true);
    }

    const handleAnalyze = (entry: DiaryEntry) => {
        setEntryToAnalyze(entry);
    };
    
    const handleCloseAnalysis = () => {
        setEntryToAnalyze(null);
        clearAnalysis();
    };
    
    const handleDelete = async (id: string) => {
        if (window.confirm("Are you sure you want to delete this entry?")) {
            await deleteEntry(id);
            setIsEditing(false);
            setEntryToEdit(null);
        }
    };

    return (
        <div className="space-y-6">
            <div className="flex flex-col md:flex-row justify-between items-center gap-4">
                <h1 className="text-4xl font-bold">My Diary</h1>
                <button onClick={() => { setEntryToEdit(null); setIsEditing(true); }} className="flex items-center space-x-2 px-4 py-2 bg-gradient-to-r from-purple-500 to-pink-500 text-white font-semibold rounded-md hover:opacity-90 transition-opacity">
                    <Plus size={20} />
                    <span>New Entry</span>
                </button>
            </div>
            
            {/* Filters */}
            <div className="flex flex-col md:flex-row gap-4">
                <div className="relative flex-grow">
                    <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground" size={20}/>
                    <input 
                        type="text"
                        placeholder="Search entries..."
                        value={searchTerm}
                        onChange={e => setSearchTerm(e.target.value)}
                        className="w-full bg-secondary/50 border border-border rounded-md pl-10 pr-4 py-2 focus:ring-1 focus:ring-primary/50 focus:outline-none"
                    />
                </div>
                <div className="flex items-center space-x-1 p-1 bg-secondary/50 border border-border rounded-full">
                     <button onClick={() => setSelectedMood(null)} className={`p-2 rounded-full text-sm transition-transform duration-200 ${!selectedMood ? 'bg-primary/20 scale-110' : 'hover:bg-primary/10'}`}>All</button>
                    {Object.values(Mood).map(mood => (
                        <button key={mood} onClick={() => setSelectedMood(mood)} className={`p-2 rounded-full text-xl transition-transform duration-200 ${selectedMood === mood ? 'bg-primary/20 scale-110' : 'hover:bg-primary/10'}`}>
                            {MOOD_EMOJIS[mood]}
                        </button>
                    ))}
                </div>
            </div>

            {/* Entry List */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredEntries.map(entry => (
                    <DiaryEntryCard key={entry.id} entry={entry} onEdit={handleEdit} onAnalyze={handleAnalyze} />
                ))}
            </div>

            {filteredEntries.length === 0 && (
                <div className="text-center py-20">
                    <p className="text-muted-foreground">No entries found.</p>
                </div>
            )}

            {isEditing && <EntryEditor entry={entryToEdit} onSave={handleSaveEntry} onCancel={() => setIsEditing(false)} onDelete={entryToEdit ? handleDelete : undefined} />}
            {entryToAnalyze && <AIAnalysisModal entry={entryToAnalyze} onClose={handleCloseAnalysis} />}
        </div>
    );
};

export default Diary;